print ""
print("credo")
raw_input
raw_input()
input()
10
10/20
10//20
print
help(pritn)
help(print)
pprint
import pprint
dir(pprint)
help(print)
print "1"
print("1", "2", "3")
print("1", "2", "3", sep=",")
print("1", "2", "3", sep="|")
a = [1,2,3,4,5]
"".join
"".join(a)
"".join(a)a
a
"".join(a)
"".join([i for i in a])
"".join([str(i) for i in a])
s = [str(i) for i in a]
s
a
"".join(a)
"".join(s)
"|".join(s)
",".join(s)
a = [
1
,
2,
3
,
4
]
s = "a
s = "a \
end"
s
s = """a 
how are you"""
s
v = 1
v=1
v = 1
V
raw_input
a = input("Enter your key:")
y
a == 'Y'
a == 'y'
a.lower() == 'y'
a = input("Enter your key:")
Y
a
a.lower() == 'y'
10/2
1/2
1//2
print("1")
print ("1")
print "1"
a = 10
A
B = 20
b
print = 1
if = 1
If = 1
printt()
print()
print(1)
a = 10
a = 10;
a = 10;b=9
a = 10
l = [
1,
2,
3
]
l
a = 100
a
a == 200
c == 200
a == 200
a == 100
a > 50
a < 50
a == None
None == ''
None == 
None == 0
class = 1
False = 1
True = 1
None = 1
import readline;readline.write_history_file('/home/mohideen/Desktop/pyScript/eg6.txt')
exit()
def f() -> str:
   return "ok"
f()
def f() -> str:
   return 1
f()
type(f())
items = {"A": 1, "B": 2, "C": 3}
u_items = {"D": 4, "B": 4, "E": 8, "C": 4}
items.update((k + '_1' if k in items else k, v) for k, v in u_items.items())
items
n_items = {"C":7, "B":9}
items.update((k + '_1' if k in items else k, v) for k, v in n_items.items())
items
items.update((k + '_1' if k in items else k, v) for k, v in u_items.items())
items
items.update((k + '_1' if k in items else k, v) for k, v in u_items.items())
items
items = {"A": 1, "B": 2, "C": 3}
u_items = {"D": 4, "B": 4, "E": 8, "C": 4}
items.update((k + '_1' if k in items else k, v) for k, v in u_items.items())
items
n_items = {"C":7, "B":9}
for k, v in n_items.items():
   print k
for k, v in n_items.items():
   print(k)
for k, v in n_items.items():
   print(k)
for k, v in n_items.items():
   k in items
for k, v in n_items.items():
   [i for i in items if k in i]
for k, v in n_items.items():
   max[i for i in items if k in i]
for k, v in n_items.items():
   max(i for i in items if k in i)
1items.update(max(_k for _k in items if k in _k), v) for k, v in u_items.items())
for k, v in n_items.items():
   max(i for i in items)
for k, v in n_items.items():
   max(i for i in items)
for k, v in n_items.items():
   print(k)]
for k, v in n_items.items():
   print(k)
for k, v in n_items.items():
   max(k for k in items)
for k, v in n_items.items():
   max(k for i in items)
n_items
items
for k, v in n_items.items():
   max(i for i in items if k in i)
[ max(i for i in items if k in i) for k,v in n_items.items()]
1items.update(max(_k for _k in items if k in _k), v) for k, v in u_items.items())
[ max(i for i in items if k in i) for k,v in u_items.items()]
items = {"A": 1, "B": 2, "C": 3}
u_items = {"D": 4, "B": 4, "E": 8, "C": 4}
[ max(i for i in items if k in i) for k,v in u_items.items()]
[ max(i for i in items if k in i.keys()) for k,v in u_items.items()]
[k for k,v in u_items.items()]
[k for k,v in u_items.items() if k in items]
[k for k,v in u_items.items() if k in items else 0]
[k for k,v in u_items.items()]
[items.keys().index(k) for k,v in u_items.items()]
[items.keys() for k,v in u_items.items()]
[dir(items.keys()) for k,v in u_items.items()]
[k for k,v in u_items.items()]
[k in items for k,v in u_items.items()]
items1 = {"A": 1, "B_1": 2, "C": 3}
[k in items1 for k,v in u_items.items()]
[k for k,v in u_items.items()]
items.update((k + '_1' if k in items else k, v) for k, v in n_items.items())
items
items = {"A": 1, "B": 2, "C": 3}
items.update((k + '_1' if k in items else k, v) for k, v in u_items.items())
items
n_items = {"C":7, "B":9}
(k + '_1' if k in items else k, v) for k, v in n_items.items()
k + '_1' if k in items else k, v) for k, v in n_items.items()
(k + '_1' if k in items else k, v) for k, v in n_items.items())
((k + '_1' if k in items else k, v) for k, v in n_items.items())
[(k + '_1' if k in items else k, v) for k, v in n_items.items()]
items
for k,v in n_items.items():
    print (k)
[(k + '_1' if k in items else k, v) for k, v in n_items.items()]
[(i for k in items) for k, v in n_items.items()]
[max(i for k in items) for k, v in n_items.items()]
[max(i for i in items if k in i) for k, v in n_items.items()]
items
n_items = {"C":7, "B":9, 'D': 5}
[max(i for i in items if k in i) for k, v in n_items.items()]
n_items = {"C":7, "B":9, 'D': 5, 'X':1}
[max(i for i in items if k in i) for k, v in n_items.items()]
[max(i if k in i else 0 for i in items) for k, v in n_items.items()]
[max(i if k in i else '' for i in items) for k, v in n_items.items()]
[max(i if k in i else '' for i in items), v for k, v in n_items.items()]
[(max(i if k in i else '' for i in items), v) for k, v in n_items.items()]
[(max(i if k in i else '' for i in items) + '_1', v) for k, v in n_items.items()]
[(max(i if k in i for i in items), v) for k, v in n_items.items()]
[(max(i if k in i else None for i in items), v) for k, v in n_items.items()]
[max(i for i in items if k in i) for k, v in n_items.items()]
[k if k in i else None for k, v in n_items.items()]
[k if k in items else None for k, v in n_items.items()]
for k, v in n_items.items():
  print (k)
for k, v in n_items.items():
  if k in items:
    print (k)
for k, v in n_items.items():
  if k in items:
    print (max(i for i in items if k in i))
for k, v in n_items.items():
  _k = (k, v)
  if k in items:
     _k = (max(i for i in items if k in i)+'_1', v)
  items.update(_k)
for k, v in n_items.items():
  _k = (k, v)
  if k in items:
     _k = (max(i for i in items if k in i)+'_1', v)
  print (_k)
for k, v in n_items.items():
  _k = (k, v)
for k, v in n_items.items():
  _k = {k: v}
  if k in items:
     _k = {max(i for i in items if k in i)+'_1': v}
  print (_k)
for k, v in n_items.items():
  _k = {k: v}
  if k in items:
     _k = {max(i for i in items if k in i)+'_1': v}
  items.update(_k)
items
help([].insert)
help(''.center)
''.center(width=1)
len
dir()
from sample import *
dir()
len
help(len)
import random
dir(random)
help(random.seed)
seed(10, 1)
random.seed(10, 1)
s = random.seed(10, 1)
s
help(random.seed)
s = random.seed(10, 2)
s
help(random.seed)
def square():
def square(a, b):
   print('a', a, 'b', b)
   print('c', c)
square(1,2)
c = 10
square(1,2)
a = 10
b = 20
square(1,2)
def square(a, b, c):
   print('c', c)
square(1,2,3)
def square():
   print('a', a, 'b', b)
   print('c', c)
square()
def square():
   a, b, c = (1,2,3)
   print('a', a, 'b', b)
   print('c', c)
square()
a
b
c
del a, b, c
square()
a
d = square
d
d()
d = square()
d
def square():
   a, b, c = (1,2,3)
   return (a,b,c)
square()
d = square()
d
def square():
   a, b, c = (1,2,3)
   return a,b,c
d = square()
d
def square():
   a, b, c = (1,2,3)
   return a
   return b
d = square()
d
a
b
def sample():
   a = 10
   b = 20
sample()
a
def sample():
  global a, b
   a = 10
def sample():
  global a, b
  a = 10
  b = 20
a
b
sample()
a
b
def sum():
  c = a+b
sum()
c
def sum():
  global c
  c = a+b
c
sum()
c
def sum(a,b):
  return a + b
sum(1, 2)
sum(1, 2, 3)
sum(1)
sum(a=1, b=3)
sum(b=1, a=3)
def sub(a,b):
  return a - b
sum(a=1, b=3)
sub(a=1, b=3)
sub(b=1, a=3)
sub(1,2)
sub(2,1)
sub(b=1)
sub(b=1, 1)
sub(1,b=1)
sub(b=1, a=1)
sub(a=1,b=1)
sub(1,1)
sub(a=1,1)
def sum(a=1,b=2):
  return a + b
sum()
sum(a=10)
sum(1, b=10)
sum(a=1, b=10)
sum(a=1, b)
sum(1,2,3)
def sum(a=1,b):
  pass
def sum(a,b=1):
  pass
sum()
sum(1,2,3)
sum
help(sum)
def sum(a, b=20):
  return a + b
sum(1)
sum(1,2)
sum([1,2])
def sum(a, b=20):
  print(a, b)
sum([1,2])
def sum(a, b):
  print(a, b)
sum([1,2])
sum(*[1,2])
sum({'a':1,'b':2})
sum(**{'a':1,'b':2})
sum(**{'b':1,'a':2})
sum(**{'b':1,'c':2})
sum(a=1, b=2)
sum(a=1, c=2)
sum(1,2)
sum(*[1,2])
sum(**{'a':1,'b':2})
sum(a=1, b=2)
def sum(*a):
  print(a)
sum()
sum(1)
sum(1,2)
sum(1,2,3)
def sum(*a):
  out = 0
  for i in out:
    out+=i
  return out
def sum(*a):
  out = 0
  for i in a:
    out+=i
  return out
sum(1,2,3)
sum(1,2,3,10)
sum(1)
def sum(*a, *b):
def sum(*a, **b):
  print('a', a, 'b', b)
sum(1,2,3,10)
sum(1,2,c=3,d=10)
def sum(*args, **kwargs):
  print('args', args, 'kwargs', kwargs)
sum(1,2,c=3,d=10)
sum([1,2],c=3,d=10)
sum(a=[1,2],c=3,d=10)
sum(a=[1,2],3,d=10)
a = [1,2,3]
sum(*a,c=3,d=10)
sum(a,c=3,d=10)
def sum(a, b, *args, **kwargs):
  print('a', a, 'b', b, 'args', args, 'kwargs', kwargs)
a
sum(*a,c=3,d=10)
def sum(a, b, c, *args, **kwargs):
  print('a', a, 'b', b, 'args', args, 'kwargs', kwargs)
sum(*a,c=3,d=10)
def sum(a, b, e, c, *args, **kwargs):
  print('a', a, 'b', b, 'args', args, 'kwargs', kwargs)
sum(*a,c=3,d=10)
a = [1,2,3,4,5]
sum(*a,c=3,d=10)
def sum(a, b, e, c, *args, **kwargs):
  print('a', a, 'b', b, 'args', args, 'kwargs', kwargs)
a
sum(*a,d=10)
def a(b):
  pass
a(1)
a(1, b=1)
a(b=1)
a(1)
def fib(n):
  i = [0, 1]
  for j in range(n-2):
     i.append(i[0] + i[1])
  return i
fib(10)
def fib(n):
  i = [0, 1]
  for j in range(n-2):
     i.append(i[-1] + i[-2])
  return i
fib(10)
def fib(n):
  i = 0
  j = 1
  print(i, j,)
  for k in range(n-2):
     print(i+j,)
def fib(n):
  i = 0
  j = 1
  print(i, j,)
  for k in range(n-2):
     m = i + j
     print(m,)
     i = j
     j = m
fib(10)
def fib(n):
  i, j = 0, 1
  out = "{} {}".format(i, j)
  for k in range(n-2):
     m = i + j
     i = j
     j = m
     out+= "{} {}".format(out, m)
  return out
fib(5)
fib(10)
def palindrome(i):
  if i == i[::-1]:
    return "Its a palindrome!"
  return "Its not a palindrome!"
palindrome(1)
dir(1)
dir('s')
def palindrome(i):
  if '__getitem__' in dir(i):
    if i == i[::-1]:
      return "Its a palindrome!"
    return "Its not a palindrome!"
  else:
    return "Invalid input"
palindrome(1)
def palindrome(i):
  if '__getitem__' not in dir(i):
    return "Invalid input"
  if i == i[::-1]:
    return "Its a palindrome!"
  return "Its not a palindrome!"
palindrome(1.5)
palindrome('1.5')
palindrome('1.1')
def palindrome(i):
  if '__getitem__' not in dir(i):
     i = str(i)
  if i == i[::-1]:
    return "Its a palindrome!"
  return "Its not a palindrome!"
palindrome(1.5)
palindrome(1.1)
def palindrome(i):
  i = str(i) if '__getitem__' not in dir(i) else i
  if i == i[::-1]:
    return "Its a palindrome!"
  return "Its not a palindrome!"
palindrome(1.1)
def palindrome(i):
  i = str(i) if '__getitem__' not in dir(i) else i
  return "Its a palindrome!" if i == i[::-1] else "Its not a palindrome!"
palindrome(1.1)
len
del len
len(1)
max
max([1,2,3])
def maximum(i):
  out = i[0]
  for j in i:
    if out < j:
       out = j
  return out
maximum([1,2,3])
any([1,2,0])
all([1,2,0])
all([1,2,3])
import readline
readline.write_history_file("/home/mohideen/Desktop/pyDocs/txtFiles/Jun23FuncwithArg.txt")
