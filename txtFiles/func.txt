mohideen@mohideen-Latitude-E7470:~/Desktop/pyScript$ python
Python 2.7.12 (default, Nov 12 2018, 14:36:49) 
[GCC 5.4.0 20160609] on linux2
Type "help", "copyright", "credits" or "license" for more information.
>>> [i for i in range(1)]
[0]
>>> "Welcome %s you have cleared %s"
'Welcome %s you have cleared %s'
>>> s = "Welcome %s you have cleared %s"
>>> inp = raw_ipnut("Enter you name: ")
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'raw_ipnut' is not defined
>>> inp = raw_input("Enter you name: ")
Enter you name: Niteesh
>>> d = raw_input("Enter you Degree: ")
Enter you Degree: B.E
>>> s = "Welcome %s you have cleared %s"%(inp, d)
>>> s
'Welcome Niteesh you have cleared B.E'
>>> "%d"
'%d'
>>> "%d"%2
'2'
>>> "%s"%2
'2'
>>> "%d"%'2'
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: %d format: a number is required, not str
>>> "%s"%2.1
'2.1'
>>> "%f"%2.1
'2.100000'
>>> "%1.f"%2.1
'2'
>>> "%10.f"%2.1
'         2'
>>> "%10.2f"%2.1
'      2.10'
>>> "%10.5f"%2.1
'   2.10000'
>>> a = [i for i in range(10)]
>>> a
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
>>> a = [i for i in range(10) if i%2 != 0]
>>> a
[1, 3, 5, 7, 9]
>>> a = [i for i in range(10) if i%2 == 0]
>>> a
[0, 2, 4, 6, 8]
>>> a = ["Odd Number %s"%i for i in range(10) if i%2 == 0]
>>> a
['Odd Number 0', 'Odd Number 2', 'Odd Number 4', 'Odd Number 6', 'Odd Number 8']
>>> 
>>> help('def')

>>> a = 10
>>> b = 30
>>> a+b
40
>>> a+b
40
>>> help('def')

>>> 



































>>> def a():
...   print 5
...   print 6
... 
>>> print 1
1
>>> a(1)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: a() takes no arguments (1 given)
>>> a()
5
6
>>> 
































>>> a()
5
6
>>> w = a()
5
6
>>> w
>>> def a():
...   x = 10
...   y = 20
...   return x+y
... 
>>> a()
30
>>> w = a()
>>> w
30
>>> s = raw_input()
credo
>>> s
'credo'
>>> def raw_input():
...    print "hi hello"
... 
>>> s
'credo'
>>> s = raw_input()
hi hello
>>> s
>>> def square(n):
...    print n*n
... 
>>> square(5)
25
>>> w = square(5)
25
>>> w
>>> def square(n):
...    return n*n
... 
>>> w = square(5)
>>> w
25
>>> 


>>> x
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'x' is not defined
>>> 









































>>> x = 10
>>> def sum():
...    x  = 20
...    print x
... 
>>> sum()
20
>>> x
10
>>> def sum():
...    print x
... 
>>> sum()
10
>>> x
10
>>> 













>>> x
10
>>> def sum():
...    global x
...    x = 20
...    print x
... 
>>> x
10
>>> sum()
20
>>> x
20
>>> 
































>>> def sum(a, b):
...     return a+b
... 
>>> sum()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: sum() takes exactly 2 arguments (0 given)
>>> sum(1)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: sum() takes exactly 2 arguments (1 given)
>>> sum(1, 9)
10
>>> l = sum(1, 9)
>>> l
10
>>> def powerof(a, b):
...    return a**b
... 
>>> power(2, 3)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'power' is not defined
>>> powerof(2, 3)
8
>>> powerof(3, 2)
9
>>> powerof(b=3, a=2)
8
>>> def powerof(a=2, b=1):
...    return a**b
... 
>>> powerof()
2
>>> powerof(3)
3
>>> def powerof(a=2, b):
...    return a**b
... 
  File "<stdin>", line 1
SyntaxError: non-default argument follows default argument
>>> def powerof(a, b=1):
...    return a**b
... 
>>> powerof(3)
3
>>> powerof(3)l
  File "<stdin>", line 1
    powerof(3)l
              ^
SyntaxError: invalid syntax
>>> range(1)
>>> range(1)
[0]
>>> range(1)[1]
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
IndexError: list index out of range
>>> d = {'a':1}
>>> d['a']
1
>>> d['b']
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
KeyError: 'b'
>>> dir(d)
['__class__', '__cmp__', '__contains__', '__delattr__', '__delitem__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__gt__', '__hash__', '__init__', '__iter__', '__le__', '__len__', '__lt__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__setitem__', '__sizeof__', '__str__', '__subclasshook__', 'clear', 'copy', 'fromkeys', 'get', 'has_key', 'items', 'iteritems', 'iterkeys', 'itervalues', 'keys', 'pop', 'popitem', 'setdefault', 'update', 'values', 'viewitems', 'viewkeys', 'viewvalues']
>>> d.get('b', 'Not exist')
'Not exist'
>>> d.get('a', 'Not exist')
1
>>> help(d.get)

>>> 





















>>> def sum(a, b):
...    return a**b
... 
>>> sum()
KeyboardInterrupt
>>> def sum(a=2, b=0):
...    return a**b
... 
>>> sum()
1
>>> sum(2,3)
8
>>> sum(b=2,a=3)
9
>>> sum(2,3)
8
>>> sum(b=2,a=3)
9
>>> "{} {}".format(1,2)
'1 2'
>>> "{} {}".format([1,2])
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
IndexError: tuple index out of range
>>> "{0} {0}".format([1,2])
'[1, 2] [1, 2]'
>>> "{1} {0}".format(1,2)
'2 1'
>>> "{} {}".format(1,2)
'1 2'
>>> "{} {}".format([1,2])
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
IndexError: tuple index out of range
>>> "{} {}".format(*[1,2])
'1 2'
>>> 









>>> def power(a,b):
...    return a**b
... 
>>> power(2,3)
8
>>> power([2,3])
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: power() takes exactly 2 arguments (1 given)
>>> power(*[2,3])
8
>>> power(*{'a':2,'b':3})
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "<stdin>", line 2, in power
TypeError: unsupported operand type(s) for ** or pow(): 'str' and 'str'
>>> power(**{'a':2,'b':3})
8
>>> power(a=2,b=3)
8
>>> power(**{'a':2,'c':3})
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: power() got an unexpected keyword argument 'c'
>>> def power(x,y *l, *d):
  File "<stdin>", line 1
    def power(x,y *l, *d):
                  ^
SyntaxError: invalid syntax
>>> 
















>>> def power(x,y *l, **d):
  File "<stdin>", line 1
    def power(x,y *l, **d):
                  ^
SyntaxError: invalid syntax
>>> 








































>>> def power(x,y, *l, **d):
...    print 'x', x, 'y', y, 'l', l, 'd', d
... 
>>> power(1,2)
x 1 y 2 l () d {}
>>> power(1)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: power() takes at least 2 arguments (1 given)
>>> power(1, 2)
x 1 y 2 l () d {}
>>> power(1, 2, 3, 4, 5, 6)
x 1 y 2 l (3, 4, 5, 6) d {}
>>> power(1, 2, 3, 4, 5, 6, a=10, b= 20, c=30)
x 1 y 2 l (3, 4, 5, 6) d {'a': 10, 'c': 30, 'b': 20}
>>> def power(x,y, *args, **kwargs):
...    print 'x', x, 'y', y, 'args', args, 'kwargs', kwargs
... 
>>> power(1, 2, 3, 4, 5, 6, a=10, b= 20, c=30)
x 1 y 2 args (3, 4, 5, 6) kwargs {'a': 10, 'c': 30, 'b': 20}
>>> 

























>>> import random
>>> random.randint(1, 10)
1
>>> random.randint(1, 10)
3
>>> random.randint(1, 10)
2
>>> random.randint(1, 10)
7
>>> random.choice([1,2,3,4,5,6])
6
>>> random.choice([1,2,3,4,5,6])
2
>>> random.choice([1,2,3,4,5,6])
5
>>> random.choice([1,2,3,4,5,6])
4
>>> dir(random)
['BPF', 'LOG4', 'NV_MAGICCONST', 'RECIP_BPF', 'Random', 'SG_MAGICCONST', 'SystemRandom', 'TWOPI', 'WichmannHill', '_BuiltinMethodType', '_MethodType', '__all__', '__builtins__', '__doc__', '__file__', '__name__', '__package__', '_acos', '_ceil', '_cos', '_e', '_exp', '_hashlib', '_hexlify', '_inst', '_log', '_pi', '_random', '_sin', '_sqrt', '_test', '_test_generator', '_urandom', '_warn', 'betavariate', 'choice', 'division', 'expovariate', 'gammavariate', 'gauss', 'getrandbits', 'getstate', 'jumpahead', 'lognormvariate', 'normalvariate', 'paretovariate', 'randint', 'random', 'randrange', 'sample', 'seed', 'setstate', 'shuffle', 'triangular', 'uniform', 'vonmisesvariate', 'weibullvariate']
>>> 






















>>> input()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
KeyboardInterrupt
>>> 









































>>> import random as r
>>> min, max = 1, 6
>>> min
1
>>> max
6
>>> r_again = 'y'
>>> while r_again == 'y':
...   print "Rolling the dices... \n the values are..."
...   print r.randint(min, max), r.choice(range(min, max+1))
...   r_again = raw_input("Roll the dices again? (y/n)")
... 
Rolling the dices... 
 the values are...
2 6
Traceback (most recent call last):
  File "<stdin>", line 4, in <module>
TypeError: raw_input() takes no arguments (1 given)
>>> 
[3]+  Stopped                 python
mohideen@mohideen-Latitude-E7470:~/Desktop/pyScript$ ^C
mohideen@mohideen-Latitude-E7470:~/Desktop/pyScript$ 
























mohideen@mohideen-Latitude-E7470:~/Desktop/pyScript$ python egwhile.py 
Rolling the dices... 
 the values are...
6 5
Roll the dices again? (y/n)y
Rolling the dices... 
 the values are...
6 5
Roll the dices again? (y/n)y
Rolling the dices... 
 the values are...
2 3
Roll the dices again? (y/n)y
Rolling the dices... 
 the values are...
1 2
Roll the dices again? (y/n)y
Rolling the dices... 
 the values are...
3 2
Roll the dices again? (y/n)y
Rolling the dices... 
 the values are...
3 4
Roll the dices again? (y/n)y
Rolling the dices... 
 the values are...
6 4
Roll the dices again? (y/n)n
mohideen@mohideen-Latitude-E7470:~/Desktop/pyScript$ 

