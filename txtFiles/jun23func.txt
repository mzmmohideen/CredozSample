print ""
print("credo")
raw_input
raw_input()
input()
10
10/20
10//20
print
help(pritn)
help(print)
pprint
import pprint
dir(pprint)
help(print)
print "1"
print("1", "2", "3")
print("1", "2", "3", sep=",")
print("1", "2", "3", sep="|")
a = [1,2,3,4,5]
"".join
"".join(a)
"".join(a)a
a
"".join(a)
"".join([i for i in a])
"".join([str(i) for i in a])
s = [str(i) for i in a]
s
a
"".join(a)
"".join(s)
"|".join(s)
",".join(s)
a = [
1
,
2,
3
,
4
]
s = "a
s = "a \
end"
s
s = """a 
how are you"""
s
v = 1
v=1
v = 1
V
raw_input
a = input("Enter your key:")
y
a == 'Y'
a == 'y'
a.lower() == 'y'
a = input("Enter your key:")
Y
a
a.lower() == 'y'
10/2
1/2
1//2
print("1")
print ("1")
print "1"
a = 10
A
B = 20
b
print = 1
if = 1
If = 1
printt()
print()
print(1)
a = 10
a = 10;
a = 10;b=9
a = 10
l = [
1,
2,
3
]
l
a = 100
a
a == 200
c == 200
a == 200
a == 100
a > 50
a < 50
a == None
None == ''
None == 
None == 0
class = 1
False = 1
True = 1
None = 1
import readline;readline.write_history_file('/home/mohideen/Desktop/pyScript/eg6.txt')
exit()
def f() -> str:
   return "ok"
f()
def f() -> str:
   return 1
f()
type(f())
items = {"A": 1, "B": 2, "C": 3}
u_items = {"D": 4, "B": 4, "E": 8, "C": 4}
items.update((k + '_1' if k in items else k, v) for k, v in u_items.items())
items
n_items = {"C":7, "B":9}
items.update((k + '_1' if k in items else k, v) for k, v in n_items.items())
items
items.update((k + '_1' if k in items else k, v) for k, v in u_items.items())
items
items.update((k + '_1' if k in items else k, v) for k, v in u_items.items())
items
items = {"A": 1, "B": 2, "C": 3}
u_items = {"D": 4, "B": 4, "E": 8, "C": 4}
items.update((k + '_1' if k in items else k, v) for k, v in u_items.items())
items
n_items = {"C":7, "B":9}
for k, v in n_items.items():
   print k
for k, v in n_items.items():
   print(k)
for k, v in n_items.items():
   print(k)
for k, v in n_items.items():
   k in items
for k, v in n_items.items():
   [i for i in items if k in i]
for k, v in n_items.items():
   max[i for i in items if k in i]
for k, v in n_items.items():
   max(i for i in items if k in i)
1items.update(max(_k for _k in items if k in _k), v) for k, v in u_items.items())
for k, v in n_items.items():
   max(i for i in items)
for k, v in n_items.items():
   max(i for i in items)
for k, v in n_items.items():
   print(k)]
for k, v in n_items.items():
   print(k)
for k, v in n_items.items():
   max(k for k in items)
for k, v in n_items.items():
   max(k for i in items)
n_items
items
for k, v in n_items.items():
   max(i for i in items if k in i)
[ max(i for i in items if k in i) for k,v in n_items.items()]
1items.update(max(_k for _k in items if k in _k), v) for k, v in u_items.items())
[ max(i for i in items if k in i) for k,v in u_items.items()]
items = {"A": 1, "B": 2, "C": 3}
u_items = {"D": 4, "B": 4, "E": 8, "C": 4}
[ max(i for i in items if k in i) for k,v in u_items.items()]
[ max(i for i in items if k in i.keys()) for k,v in u_items.items()]
[k for k,v in u_items.items()]
[k for k,v in u_items.items() if k in items]
[k for k,v in u_items.items() if k in items else 0]
[k for k,v in u_items.items()]
[items.keys().index(k) for k,v in u_items.items()]
[items.keys() for k,v in u_items.items()]
[dir(items.keys()) for k,v in u_items.items()]
[k for k,v in u_items.items()]
[k in items for k,v in u_items.items()]
items1 = {"A": 1, "B_1": 2, "C": 3}
[k in items1 for k,v in u_items.items()]
[k for k,v in u_items.items()]
items.update((k + '_1' if k in items else k, v) for k, v in n_items.items())
items
items = {"A": 1, "B": 2, "C": 3}
items.update((k + '_1' if k in items else k, v) for k, v in u_items.items())
items
n_items = {"C":7, "B":9}
(k + '_1' if k in items else k, v) for k, v in n_items.items()
k + '_1' if k in items else k, v) for k, v in n_items.items()
(k + '_1' if k in items else k, v) for k, v in n_items.items())
((k + '_1' if k in items else k, v) for k, v in n_items.items())
[(k + '_1' if k in items else k, v) for k, v in n_items.items()]
items
for k,v in n_items.items():
    print (k)
[(k + '_1' if k in items else k, v) for k, v in n_items.items()]
[(i for k in items) for k, v in n_items.items()]
[max(i for k in items) for k, v in n_items.items()]
[max(i for i in items if k in i) for k, v in n_items.items()]
items
n_items = {"C":7, "B":9, 'D': 5}
[max(i for i in items if k in i) for k, v in n_items.items()]
n_items = {"C":7, "B":9, 'D': 5, 'X':1}
[max(i for i in items if k in i) for k, v in n_items.items()]
[max(i if k in i else 0 for i in items) for k, v in n_items.items()]
[max(i if k in i else '' for i in items) for k, v in n_items.items()]
[max(i if k in i else '' for i in items), v for k, v in n_items.items()]
[(max(i if k in i else '' for i in items), v) for k, v in n_items.items()]
[(max(i if k in i else '' for i in items) + '_1', v) for k, v in n_items.items()]
[(max(i if k in i for i in items), v) for k, v in n_items.items()]
[(max(i if k in i else None for i in items), v) for k, v in n_items.items()]
[max(i for i in items if k in i) for k, v in n_items.items()]
[k if k in i else None for k, v in n_items.items()]
[k if k in items else None for k, v in n_items.items()]
for k, v in n_items.items():
  print (k)
for k, v in n_items.items():
  if k in items:
    print (k)
for k, v in n_items.items():
  if k in items:
    print (max(i for i in items if k in i))
for k, v in n_items.items():
  _k = (k, v)
  if k in items:
     _k = (max(i for i in items if k in i)+'_1', v)
  items.update(_k)
for k, v in n_items.items():
  _k = (k, v)
  if k in items:
     _k = (max(i for i in items if k in i)+'_1', v)
  print (_k)
for k, v in n_items.items():
  _k = (k, v)
for k, v in n_items.items():
  _k = {k: v}
  if k in items:
     _k = {max(i for i in items if k in i)+'_1': v}
  print (_k)
for k, v in n_items.items():
  _k = {k: v}
  if k in items:
     _k = {max(i for i in items if k in i)+'_1': v}
  items.update(_k)
items
help([].insert)
help(''.center)
''.center(width=1)
range(100)
list(range(100))
set([1,2])
s = set([1,2])
type(s)
s = {1,2,3}
type(s)
[range(100)]
[i for i in range(100)]
[i for i in range(100) if i%2!=0]
[i for i in range(100) if i%2]
odd = [i for i in range(100) if i%2]
odd
[i for i in 'credo systemz' if i in 'aeiou']
[i for i in 'credo systemz' if i == 'aeiou']
[i for i in 'credo systemz']
list('credo systemz')
import random
random.randint(1, 10)
a = []
for i in range(100):
   if len(a) == 10:
     break
   random.randint(0, i)
   a.append(random.randint(0, i))
a
a = []
for i in range(10):
   a.append(random.randint(0, 100))
a
[random.randint(10, 99) for i in range(100)]
[random.randint(0, i) for i in range(100)]
a = {'apple': 5, 'orange': 10, 'banana': 20, 'mango': 20, 'pineapple': 4}
a
k = a.keys()
k
k = a.values()
k = a.keys()
v = a.values()
k
v
zip
zip(k,v)
[i for i in zip(k,v)]
dict(zip(k,v))
d.items()
a.items()
enumerate(k)
[i for i in enumerate(k)]
dict(enumerate(k))
{i for i in enumerate(k)}
s = {i for i in enumerate(k)}
type(s)
{i[0] for i in enumerate(k)}
{i[1] for i in enumerate(k)}
{i[1]:i[0] for i in enumerate(k)}
dict(zip(k,v))
k
k = list(k)
k
l
k
list(enumerate(k))
dict(enumerate(k))
{i:v for i, v in enumerate(k)}
{v:i for i, v in enumerate(k)}
{i[0]:i[1] for i in enumerate(k)}
k = (1, 'apple')
k
k, v = (1, 'apple')
k
v
\
k = (1, 'apple')
k
k[0]
k[1]
k, v = (1, 'apple')
k
v
{i:v for i, v in enumerate(k)}
k = a.keys()
k
{i:v for i, v in enumerate(k)}
{i:v for i, v in enumerate(k) if 'e' in v}
{i:v for i in enumerate(k) if 'e' in v}
v~
del v
{i:v for i in enumerate(k) if 'e' in v}
{i[0]:i[1] for i in enumerate(k) if 'e' in i[1]}
s = {i[0] for i in enumerate(k) if 'e' in i[1]}
type(s)
s
(i for i in range(10))
def length(inp):
   l = 0
   for i in inp:
     l+=1
   print('length is', l)
s = length('credo')
s
s = len('credo')
s
s = None
s
len = length
len
s = len('credo')
s
def len(inp):
  l = 0
  for i in inp:
    l+=1
  return l
s = len('credo')
s
del len
len
del len
def sample():
   inp = input("enter some number:")
   if inp.isdigit():
      return inp*inp
sample(1)
sample()
10
def sample():
   inp = input("enter some number:")
   if inp.isdigit():
      return int(inp)*int(inp)
sample()
10
sample()
abcd
def sample(i):
   if i.isdigit():
      return int(inp)*int(inp)
sample()
sample(1)
sample('1')
def sample(i):
   if isinstance(i, str) and i.isdigit():
      return int(i)*int(i)
   elif isinstance(i, int) or isinstance(i, float):
      return i*i
   else:
      return "Invalid Input!"
sample([])
sample(1)
sample(1.5)
sample(2)
sample('2')
def sample(i):
  inp = int(i) * int(i) if isinstance(i, str) and i.isdigit() else i*i if isinstance(i, int) or isinstance(i, float) else "Invalid Input!"
inp
def sample(i):
  inp = int(i) * int(i) if (isinstance(i, str) and i.isdigit()) else i*i if (isinstance(i, int) or isinstance(i, float)) else "Invalid Input!"
  return inp
sample(10)
import readline
readline.write_history_file("/home/mohideen/Desktop/pyScript/txtFiles/jun23func.txt")
